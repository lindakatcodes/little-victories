---
import type { actions } from "astro:actions";

interface Props {
  text: String;
  action?: keyof typeof actions;
  inverseColor?: Boolean;
  type?: "button" | "submit" | "reset";
}

const { text, action, inverseColor = false, type = "button" } = Astro.props;

const bgColor = !inverseColor ? "var(--dark-blue)" : "var(--light-blue)";
const txtColor = !inverseColor ? "var(--light-blue)" : "var(--dark-blue)";
---

<action-button data-action={action}>
  <button type={type}>{text}</button>
</action-button>

<style define:vars={{ bgColor, txtColor }}>
  button {
    padding: 0.5rem 0.75rem;
    background-color: var(--bgColor);
    color: var(--txtColor);
    border-radius: 0.25rem;
    font-weight: 500;
  }
</style>

<script>
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";

  class ActionButton extends HTMLElement {
    connectedCallback() {
      const action = this.dataset.action as keyof typeof actions | undefined;
      const button = this.querySelector("button");
      button!.addEventListener("click", async () => {
        if (action) {
          try {
            console.log("processing action");
            const result = await actions[action]({});
            console.log({ result });
            navigate("/");
          } catch (error) {
            console.error("Action failed:", error);
          }
        }
      });
    }
  }

  customElements.define("action-button", ActionButton);
</script>
